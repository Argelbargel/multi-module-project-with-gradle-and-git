def allModulesFile = file("modules.properties")
def myModulesFile = file("my-modules.properties")
def selectedModules = null

initscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: "org.ajoberstar", name: "gradle-git", version: "1.3.1"
    }
}


def myModules = new Properties();
def allModules = new Properties();
allModules.load(new FileReader(allModulesFile))
def allModuleNames = Collections.list(allModules.propertyNames())

if (myModulesFile.exists()) {
    myModules.load(new FileReader(myModulesFile))
}


if (gradle.startParameter.projectProperties.containsKey("modules")) {
    def moduleParam = gradle.startParameter.projectProperties.get("modules").trim();
    if (moduleParam == "") {
        selectedModules = null
    } else if (moduleParam == "--none") {
        selectedModules = []
    } else if (moduleParam == "--all") {
        selectedModules = Collections.list(allModules.propertyNames())
    } else {
        selectedModules = Arrays.asList(moduleParam.split('\\s*[,\\s]\\s*'))
    }
}


import groovy.swing.SwingBuilder
import org.ajoberstar.grgit.Grgit

import java.awt.BorderLayout as BL

if (selectedModules == null) {
    def myModuleNames = Collections.list(myModules.propertyNames())
    Collections.sort(allModuleNames)

    new SwingBuilder().edt {
        dialog(modal: true,
                title: 'Module ausw√§hlen',
                alwaysOnTop: true,
                resizable: false,
                locationRelativeTo: null,
                pack: true,
                show: true
        ) {
            borderLayout()
            hbox(constraints: BL.NORTH) {
                button(defaultButton: false, text: 'Alle', actionPerformed: {
                    moduleCheckBoxes.each { it.selected = true }
                })

                button(defaultButton: false, text: 'Keines', actionPerformed: {
                    moduleCheckBoxes.each { it.selected = false }
                })
            }

            vbox {
                moduleCheckBoxes = []
                for (String module : allModuleNames) {
                    moduleCheckBoxes += checkBox(module, selected: myModuleNames.contains(module))
                }
            }

            hbox(constraints: BL.SOUTH) {
                button(defaultButton: true, text: 'OK', actionPerformed: {
                    selectedModules = moduleCheckBoxes.findAll { it.selected }.collect { it.text }
                    dispose();
                })

                button(defaultButton: false, text: 'Abbrechen', actionPerformed: {
                    selectedModules = null
                    dispose();
                })
            }
        }
    }
}


if (selectedModules == null) {
    throw new GradleException("update-modules aborted")
}


myModules = new Properties();
selectedModules.each {
    if (!(it in allModuleNames)) {
        throw new GradleException("unknown module $it")
    }

    myModules.setProperty(it, allModules.getProperty(it))
}

myModules.store(new FileWriter(myModulesFile), "Aktive Module")
apply plugin: InitializeModulesPlugin


class InitializeModulesPlugin implements Plugin<Gradle> {
    @Override
    public void apply(Gradle gradle) {
        Properties modules = new Properties();
        def myModulesFile = new File("my-modules.properties")
        def allModulesFile = new File("modules.properties")
        modules.load(new FileReader(myModulesFile.exists() ? myModulesFile : allModulesFile))
        for (String module : modules.propertyNames()) {
            def directory = new File("./modules/${module}")
            def uri = modules.getProperty(module)
            if (!directory.exists()) {
                println("Cloning module $module from $uri to $directory...")
                Grgit.clone(dir: directory.getAbsolutePath(), uri: uri, remote: "origin")
            } else {
                println("Module $module from $uri already exists at $directory")
            }
        }
    }
}

